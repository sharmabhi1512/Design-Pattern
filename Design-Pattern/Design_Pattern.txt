What is a design pattern?
We need to have 3 things, Best Practices, Problems, and Solutions for those problems.
A Design pattern helps us find the recurring problem and provides its readymade solution.
If we want to limit the creation of a no of the object which is 1 of a particular class, No matter how many times we use that class in our app,
so we use Singleton Design Pattern to implement this.
Or in a different word. A design pattern is a readymade solution to a problem in a given context.

Why Design Pattern?
1:) Capture design Solution-> Identify the problem, Document them, Brainstorm multiple Solutions, Select the design of a Solution
2:) Promote Reuse -> Reuse the solution across the project for the same problem
3:) Better System design Structure -> 
4:) Common Design Language ->


How to select which design Pattern?


What is Pattern Catalog?


We have 2 main pattern catalogs.
1:) GOF(Group Of Four)/Core Pattern Catalog
2:) JEE Pattern Catalog


What is Core Pattern?
Core Patterns can be further subdivided into
1:) Creational Pattern-> It provides guidelines to instantiate a single or group of objects.
2:) Structural Pattern-> It provides a manner to define relationships b/w the class.
3:) Behavioral Pattern-> How communication should happen b/w classes and objects

What is J2EE Pattern?
We have multiple stages under which different design patterns come.
1:)Presentation Layer -> Intercepting Filter, Front Controller, MVC, Context Object, etc. 
2:)Integration Layer -> Service Activator, Web Service Broker Design patterns come under this layer
3:)Service/Presentation Layer -> Business Object, Transfer Object, Session Facade, Service Locator 
4:)DAO Layer -> Data Access Object 


What is Singleton Class?
Only one instance of a class can be created which will be shared amount other classes which want to use this object.
Example of Singleton class
Property reader is a singleton class that is used to read from a single file.
The logger class is a singleton class that is used to log in to different classes.
The Data Source class is a singleton class.

Why Singleton?
To restrict instantiation of an object of more than 1.

When to use Singleton?
To restrict instantiation of an object of more than 1.

When to use Eager Initialization?
Eager initialization we can use when we know that it is being used at least once. Preferable Lazy Initialization being used more.


What happens in the case of a Multithreaded environment?
We need to make sure our singleton class is threadsafe. To do that we can mark the method as synchronized which is being used to create an object or
we can have a synchronized block and apply class or object level lock within the method.


How Deserialization can break Singleton.
After creating an object when we serialize/save the object into any file, when we deserialize the object, and then when we read that object to compare
while comparing both the object we find both objects are different. To avoid this we can override the method called readResolve inside the Singleton
class where we can return the same object. The return type of this method should be private or protected if we want the child class to override this 
functionality.


How Clone method can break Singleton?
Any class can use the clone method to break this pattern to Avoid this, After implementing the cloan method of the Cloanable interface, We can return 
CloneNotSupportedException from the method.


What is Reflection Problem with Singleton?
We can use the Reflection mechanism to break singleton design pattern. We can access the constructor of a singleton class by calling a 
getDeclaredConstructor method on a singleton class then set a constructor accessible true and use a newInstance method to create a new instance. When
we compare the hashcode of both objects it will be different.
To fix this we can use ENUM because we don't have any constructor in ENUM. We can define a field that will represent an instance of the object.




What is Factory Design Pattern?
It is a creational design pattern that hides an object creation process or in other words, It provides an interface for creating an object in a superclass but lets the subclass decide 
which class to instantiate. 
Example:
Car Factory, Loan Factory, 
Different database(SQL, ORACLE, SQL Server) which implements the Driver interface 
DriverManager.getConnection(String "Connection String") It gives simple a connection of passed connection database

Advantages:
It allows the sub-class to choose the type of objects to create.
It promotes loose coupling.

When to use it?
When a subclass doesn't know what subclass will be required to create?




